//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfClient.NewsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="News", Namespace="http://schemas.datacontract.org/2004/07/ADP_HomeWork.DataBase.Tables")]
    [System.SerializableAttribute()]
    public partial class News : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AbstractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgencyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImagePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] RankingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalReadsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Abstract {
            get {
                return this.AbstractField;
            }
            set {
                if ((object.ReferenceEquals(this.AbstractField, value) != true)) {
                    this.AbstractField = value;
                    this.RaisePropertyChanged("Abstract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AgencyID {
            get {
                return this.AgencyIDField;
            }
            set {
                if ((this.AgencyIDField.Equals(value) != true)) {
                    this.AgencyIDField = value;
                    this.RaisePropertyChanged("AgencyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImagePath {
            get {
                return this.ImagePathField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagePathField, value) != true)) {
                    this.ImagePathField = value;
                    this.RaisePropertyChanged("ImagePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Ranking {
            get {
                return this.RankingField;
            }
            set {
                if ((object.ReferenceEquals(this.RankingField, value) != true)) {
                    this.RankingField = value;
                    this.RaisePropertyChanged("Ranking");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalReads {
            get {
                return this.TotalReadsField;
            }
            set {
                if ((this.TotalReadsField.Equals(value) != true)) {
                    this.TotalReadsField = value;
                    this.RaisePropertyChanged("TotalReads");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NewsService.INewsService")]
    public interface INewsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetLast10", ReplyAction="http://tempuri.org/INewsService/GetLast10Response")]
        WcfClient.NewsService.News[] GetLast10();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetLast10", ReplyAction="http://tempuri.org/INewsService/GetLast10Response")]
        System.Threading.Tasks.Task<WcfClient.NewsService.News[]> GetLast10Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetSimilar", ReplyAction="http://tempuri.org/INewsService/GetSimilarResponse")]
        WcfClient.NewsService.News GetSimilar(string title, string Abstract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetSimilar", ReplyAction="http://tempuri.org/INewsService/GetSimilarResponse")]
        System.Threading.Tasks.Task<WcfClient.NewsService.News> GetSimilarAsync(string title, string Abstract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetBestPositive", ReplyAction="http://tempuri.org/INewsService/GetBestPositiveResponse")]
        WcfClient.NewsService.News[] GetBestPositive(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetBestPositive", ReplyAction="http://tempuri.org/INewsService/GetBestPositiveResponse")]
        System.Threading.Tasks.Task<WcfClient.NewsService.News[]> GetBestPositiveAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetBestNegative", ReplyAction="http://tempuri.org/INewsService/GetBestNegativeResponse")]
        WcfClient.NewsService.News[] GetBestNegative(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/GetBestNegative", ReplyAction="http://tempuri.org/INewsService/GetBestNegativeResponse")]
        System.Threading.Tasks.Task<WcfClient.NewsService.News[]> GetBestNegativeAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/AddRank", ReplyAction="http://tempuri.org/INewsService/AddRankResponse")]
        bool AddRank(int ID, int Rank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/AddRank", ReplyAction="http://tempuri.org/INewsService/AddRankResponse")]
        System.Threading.Tasks.Task<bool> AddRankAsync(int ID, int Rank);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewsServiceChannel : WcfClient.NewsService.INewsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewsServiceClient : System.ServiceModel.ClientBase<WcfClient.NewsService.INewsService>, WcfClient.NewsService.INewsService {
        
        public NewsServiceClient() {
        }
        
        public NewsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WcfClient.NewsService.News[] GetLast10() {
            return base.Channel.GetLast10();
        }
        
        public System.Threading.Tasks.Task<WcfClient.NewsService.News[]> GetLast10Async() {
            return base.Channel.GetLast10Async();
        }
        
        public WcfClient.NewsService.News GetSimilar(string title, string Abstract) {
            return base.Channel.GetSimilar(title, Abstract);
        }
        
        public System.Threading.Tasks.Task<WcfClient.NewsService.News> GetSimilarAsync(string title, string Abstract) {
            return base.Channel.GetSimilarAsync(title, Abstract);
        }
        
        public WcfClient.NewsService.News[] GetBestPositive(int n) {
            return base.Channel.GetBestPositive(n);
        }
        
        public System.Threading.Tasks.Task<WcfClient.NewsService.News[]> GetBestPositiveAsync(int n) {
            return base.Channel.GetBestPositiveAsync(n);
        }
        
        public WcfClient.NewsService.News[] GetBestNegative(int n) {
            return base.Channel.GetBestNegative(n);
        }
        
        public System.Threading.Tasks.Task<WcfClient.NewsService.News[]> GetBestNegativeAsync(int n) {
            return base.Channel.GetBestNegativeAsync(n);
        }
        
        public bool AddRank(int ID, int Rank) {
            return base.Channel.AddRank(ID, Rank);
        }
        
        public System.Threading.Tasks.Task<bool> AddRankAsync(int ID, int Rank) {
            return base.Channel.AddRankAsync(ID, Rank);
        }
    }
}
